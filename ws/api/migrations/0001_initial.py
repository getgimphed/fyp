# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-07-18 18:50
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('mobile_number', models.CharField(max_length=15, unique=True, validators=[django.core.validators.RegexValidator(message='mobile should be 10 digits only.', regex='^\\d{10}$')])),
                ('added_source', models.CharField(choices=[('website', 'website'), ('android', 'android'), ('ios', 'ios'), ('super', 'super'), ('vendor', 'vendor')], default='website', max_length=10)),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('customer_role', models.CharField(choices=[('user', 'user'), ('vendor', 'vendor'), ('super', 'super'), ('fos', 'fos')], default='user', max_length=8)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='customer_modified', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'managed': True,
                'db_table': 'tbl_customer',
            },
        ),
        migrations.CreateModel(
            name='Accessories',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('product', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('not_available_at', models.DateTimeField(blank=True)),
                ('status', models.CharField(choices=[('website', 'website'), ('android', 'android'), ('ios', 'ios'), ('super', 'super'), ('vendor', 'vendor')], default='', max_length=10)),
                ('booking_quantity', models.IntegerField()),
            ],
            options={
                'db_table': 'tbl_availability',
            },
        ),
        migrations.CreateModel(
            name='Bikes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('active', 'active'), ('inactive', 'inactive')], default='active', max_length=8)),
                ('model_name', models.CharField(max_length=30)),
                ('featured', models.IntegerField(default=0)),
                ('ignition', models.CharField(choices=[('self', 'self'), ('kick', 'kick')], default='self', max_length=4)),
                ('gear', models.IntegerField(default=5)),
                ('tagline', models.CharField(max_length=255)),
                ('engine', models.SmallIntegerField(default=0)),
                ('power', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('torque', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('mileage', models.IntegerField(default=0)),
                ('kerb_weight', models.SmallIntegerField(default=0)),
                ('seat_height', models.SmallIntegerField(default=0)),
                ('description', models.TextField()),
                ('brake', models.CharField(choices=[('front', 'front'), ('drum', 'drum'), ('rear', 'rear')], default='drum', max_length=5)),
                ('fuel', models.CharField(choices=[('petrol', 'petrol'), ('diesel', 'diesel')], default='petrol', max_length=6)),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('pic1', models.CharField(default='no image', max_length=255)),
            ],
            options={
                'db_table': 'tbl_bikes',
            },
        ),
        migrations.CreateModel(
            name='Bookings',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('unique_id', models.CharField(max_length=32)),
                ('booking_quantity', models.IntegerField()),
            ],
            options={
                'db_table': 'tbl_bookings',
            },
        ),
        migrations.CreateModel(
            name='BookingsDetails',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('booking_identifier', models.CharField(max_length=32, unique=True)),
                ('pickup_date', models.DateTimeField()),
                ('drop_off_date', models.DateTimeField()),
                ('actual_amount', models.IntegerField()),
                ('delivery_amount', models.DecimalField(decimal_places=2, max_digits=5)),
                ('deposit_amount', models.IntegerField()),
                ('discount_amount', models.IntegerField()),
                ('booking_mode', models.CharField(choices=[('cash', 'cash'), ('card', 'card'), ('initiated', 'initiated')], default='initiated', max_length=9)),
                ('status', models.CharField(choices=[('initiated', 'initiated'), ('paid', 'paid')], max_length=10)),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('booking_source', models.CharField(choices=[('website', 'website'), ('android', 'android'), ('ios', 'ios'), ('super', 'super'), ('vendor', 'vendor')], default='website', max_length=10)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tbl_bookings_details',
            },
        ),
        migrations.CreateModel(
            name='Cities',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('city_name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('^[a-zA-Z\\- ]*$', 'Only alphabet characters are allowed.')])),
                ('latitude', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator('^[0-9.\\-]*$', 'Only numeric characters are allowed.')])),
                ('longitude', models.CharField(db_column='long', max_length=30, validators=[django.core.validators.RegexValidator('^[0-9.\\-]*$', 'Only numeric characters are allowed.')])),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('city_type', models.CharField(choices=[('premium', 'premium'), ('tier1', 'tier1'), ('tier2', 'tier2'), ('tier3', 'tier3'), ('tier4', 'tier4')], max_length=10)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cities_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tbl_cities',
            },
        ),
        migrations.CreateModel(
            name='FacebookConnect',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('fb_id', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'tbl_facebook_connect',
            },
        ),
        migrations.CreateModel(
            name='Fos',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=255, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tbl_fos_employees',
            },
        ),
        migrations.CreateModel(
            name='FosCash',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('supers_id', models.IntegerField()),
                ('collected', models.IntegerField()),
                ('collection_date', models.DateTimeField()),
                ('collected_by', models.IntegerField()),
            ],
            options={
                'db_table': 'tbl_fos_cash',
            },
        ),
        migrations.CreateModel(
            name='GoogleConnect',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('google_id', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'tbl_google_connect',
            },
        ),
        migrations.CreateModel(
            name='Locations',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('location_name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^[a-zA-Z(), /\\- ]*$', 'Only alphabet characters are allowed.')])),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('cities', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Cities')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='locations_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tbl_locations',
            },
        ),
        migrations.CreateModel(
            name='Make',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('make', models.CharField(max_length=30, unique=True)),
            ],
            options={
                'db_table': 'tbl_make',
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('booking_identifier', models.CharField(max_length=32, unique=True)),
                ('status', models.CharField(choices=[('initiated', 'initiated'), ('paid_card', 'paid_card'), ('paid_cash', 'paid_cash')], max_length=9)),
                ('booking_details', models.ForeignKey(db_column='booking_details_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.BookingsDetails')),
            ],
            options={
                'db_table': 'tbl_orders',
            },
        ),
        migrations.CreateModel(
            name='RiderDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('riderName', models.CharField(max_length=30)),
                ('riderMobile', models.BigIntegerField()),
                ('riderExtraHelmet', models.CharField(choices=[('True', 'True'), ('False', 'False')], max_length=5)),
                ('booking_identifier', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'db_table': 'tbl_rider_details',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^[a-zA-Z\\-]*$', 'Only alphabet characters are allowed.')])),
                ('email', models.EmailField(max_length=255, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tbl_users',
            },
        ),
        migrations.CreateModel(
            name='UsersOtp',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('otp', models.CharField(max_length=6, validators=[django.core.validators.RegexValidator('^[0-9.\\-]*$', 'Only numeric characters are allowed.')])),
                ('otp_added_on', models.DateTimeField(auto_now_add=True)),
                ('otp_verified', models.SmallIntegerField()),
                ('users', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.Users')),
            ],
            options={
                'db_table': 'tbl_users_otp',
            },
        ),
        migrations.CreateModel(
            name='Vendors',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=100)),
                ('company', models.CharField(max_length=30)),
                ('company_register_address', models.CharField(max_length=255)),
                ('company_corporate_address', models.CharField(max_length=255)),
                ('bank_name', models.CharField(max_length=50)),
                ('bank_account_number', models.CharField(max_length=50)),
                ('bank_ifsc_code', models.CharField(max_length=50)),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tbl_vendors',
            },
        ),
        migrations.CreateModel(
            name='VendorsLocations',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('latitude', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator('^[0-9.\\-]*$', 'Only numeric characters are allowed.')])),
                ('longitude', models.CharField(db_column='long', max_length=30, validators=[django.core.validators.RegexValidator('^[0-9.\\-]*$', 'Only numeric characters are allowed.')])),
                ('address', models.CharField(max_length=255)),
                ('store_open_time', models.TimeField()),
                ('store_close_time', models.TimeField()),
                ('status', models.CharField(choices=[('active', 'active'), ('inactive', 'inactive')], max_length=8)),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('fos', models.ForeignKey(db_column='fos_id', on_delete=django.db.models.deletion.CASCADE, to='api.Fos')),
                ('location', models.ForeignKey(db_column='location_id', on_delete=django.db.models.deletion.CASCADE, to='api.Locations')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vendors_modified', to=settings.AUTH_USER_MODEL)),
                ('vendors', models.ForeignKey(db_column='vendors_id', on_delete=django.db.models.deletion.CASCADE, to='api.Vendors')),
            ],
            options={
                'db_table': 'tbl_ven_loc',
            },
        ),
        migrations.CreateModel(
            name='VendorsLocationsAccessories',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('rent', models.IntegerField()),
                ('quantity', models.IntegerField()),
                ('status', models.CharField(choices=[('active', 'active'), ('inactive', 'inactive')], default='active', max_length=8)),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('accessories_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Accessories')),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(db_column='ven_loc', on_delete=django.db.models.deletion.CASCADE, to='api.VendorsLocations')),
                ('modified_by', models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='venlocbikesaccessories_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tbl_ven_loc_bikes_accessories',
            },
        ),
        migrations.CreateModel(
            name='VendorsLocationsBikes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('bikes_rent', models.IntegerField()),
                ('bikes_deposit', models.IntegerField()),
                ('bikes_quantity', models.IntegerField(default=0)),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='added', to=settings.AUTH_USER_MODEL)),
                ('bikes', models.ForeignKey(db_column='bikes_id', on_delete=django.db.models.deletion.CASCADE, to='api.Bikes')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='venlocbikes_modified', to=settings.AUTH_USER_MODEL)),
                ('ven_loc', models.ForeignKey(db_column='ven_loc_id', on_delete=django.db.models.deletion.CASCADE, to='api.VendorsLocations')),
            ],
            options={
                'db_table': 'tbl_ven_loc_bikes',
            },
        ),
        migrations.CreateModel(
            name='VendorsLocationsBikesDetails',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('active', 'active'), ('inactive', 'inactive'), ('sold', 'sold')], default='active', max_length=8)),
                ('reg_number', models.CharField(max_length=12, unique=True)),
                ('color', models.CharField(max_length=50)),
                ('insurance_last_date_time', models.DateField()),
                ('years_of_manu', models.DateField()),
                ('next_service_date_time', models.DateField()),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('ven_loc_bikes', models.ForeignKey(db_column='ven_loc_bikes_id', on_delete=django.db.models.deletion.CASCADE, to='api.VendorsLocationsBikes')),
            ],
            options={
                'db_table': 'tbl_ven_loc_bikes_details',
            },
        ),
        migrations.CreateModel(
            name='VendorsLocationsBikesService',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('reason', models.TextField()),
                ('service_start_date_time', models.DateTimeField()),
                ('service_end_date_time', models.DateTimeField()),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('ven_loc_bikes', models.ForeignKey(db_column='ven_loc_bikes_id)', on_delete=django.db.models.deletion.CASCADE, to='api.VendorsLocationsBikesDetails')),
            ],
            options={
                'db_table': 'tbl_ven_loc_bike_service',
            },
        ),
        migrations.CreateModel(
            name='VendorsLocationsBikesSold',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('reason', models.TextField()),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('ven_loc_bikes', models.ForeignKey(db_column='ven_loc_bikes_id', on_delete=django.db.models.deletion.CASCADE, to='api.VendorsLocationsBikesDetails')),
            ],
            options={
                'db_table': 'tbl_ven_loc_bike_sold',
            },
        ),
        migrations.AddField(
            model_name='googleconnect',
            name='users_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.Users'),
        ),
        migrations.AddField(
            model_name='facebookconnect',
            name='users_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.Users'),
        ),
        migrations.AddField(
            model_name='bookings',
            name='ven_loc_bikes',
            field=models.ForeignKey(db_column='ven_loc_bikes_id', on_delete=django.db.models.deletion.CASCADE, to='api.VendorsLocationsBikes'),
        ),
        migrations.AddField(
            model_name='bookings',
            name='ven_loc_id',
            field=models.ForeignKey(db_column='ven_loc_id', on_delete=django.db.models.deletion.CASCADE, to='api.VendorsLocations'),
        ),
        migrations.AddField(
            model_name='bikes',
            name='make',
            field=models.ForeignKey(db_column='make_id', on_delete=django.db.models.deletion.CASCADE, to='api.Make'),
        ),
        migrations.AddField(
            model_name='availability',
            name='bookings_identifier',
            field=models.ForeignKey(max_length=255, on_delete=django.db.models.deletion.DO_NOTHING, to='api.BookingsDetails'),
        ),
        migrations.AddField(
            model_name='availability',
            name='ven_loc_bikes',
            field=models.ForeignKey(max_length=255, on_delete=django.db.models.deletion.DO_NOTHING, to='api.VendorsLocationsBikes'),
        ),
    ]
